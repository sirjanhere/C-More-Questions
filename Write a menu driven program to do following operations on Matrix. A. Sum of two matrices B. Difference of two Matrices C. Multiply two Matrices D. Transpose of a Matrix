#include <iostream>
#include <limits> // For numeric_limits
using namespace std;

const int MAX = 10; // Maximum size for matrices

// Function to input a matrix
void inputMatrix(int mat[MAX][MAX], int rows, int cols) {
    cout << "Enter the elements of the matrix:\n";
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            while (!(cin >> mat[i][j])) {
                cin.clear(); // Clear the error flag
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
                cout << "Invalid input. Please enter a number: ";
            }
        }
    }
}

// Function to display a matrix
void displayMatrix(int mat[MAX][MAX], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to add two matrices
void addMatrices(int mat1[MAX][MAX], int mat2[MAX][MAX], int result[MAX][MAX], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = mat1[i][j] + mat2[i][j];
        }
    }
}

// Function to subtract two matrices
void subtractMatrices(int mat1[MAX][MAX], int mat2[MAX][MAX], int result[MAX][MAX], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = mat1[i][j] - mat2[i][j];
        }
    }
}

// Function to multiply two matrices
void multiplyMatrices(int mat1[MAX][MAX], int mat2[MAX][MAX], int result[MAX][MAX], int rows1, int cols1, int cols2) {
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < cols1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }
}

// Function to find the transpose of a matrix
void transposeMatrix(int mat[MAX][MAX], int trans[MAX][MAX], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            trans[j][i] = mat[i][j];
        }
    }
}

int main() {
    int choice;
    int mat1[MAX][MAX], mat2[MAX][MAX], result[MAX][MAX], trans[MAX][MAX];
    int rows1, cols1, rows2, cols2;

    cout << "Enter the number of rows and columns for Matrix 1: ";
    while (!(cin >> rows1 >> cols1)) {
        cin.clear(); // Clear the error flag
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
        cout << "Invalid input. Please enter two numbers (rows and columns): ";
    }
    inputMatrix(mat1, rows1, cols1);

    cout << "Enter the number of rows and columns for Matrix 2: ";
    while (!(cin >> rows2 >> cols2)) {
        cin.clear(); // Clear the error flag
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
        cout << "Invalid input. Please enter two numbers (rows and columns): ";
    }
    inputMatrix(mat2, rows2, cols2);

    do {
        cout << "\nMenu:\n";
        cout << "1. Sum of two matrices\n";
        cout << "2. Difference of two matrices\n";
        cout << "3. Multiply two matrices\n";
        cout << "4. Transpose of a matrix\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        while (!(cin >> choice)) {
            cin.clear(); // Clear the error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a number (1-5): ";
        }

        switch (choice) {
            case 1:
                if (rows1 == rows2 && cols1 == cols2) {
                    addMatrices(mat1, mat2, result, rows1, cols1);
                    cout << "Sum of the matrices:\n";
                    displayMatrix(result, rows1, cols1);
                } else {
                    cout << "Matrices cannot be added. Dimensions do not match.\n";
                }
                break;

            case 2:
                if (rows1 == rows2 && cols1 == cols2) {
                    subtractMatrices(mat1, mat2, result, rows1, cols1);
                    cout << "Difference of the matrices:\n";
                    displayMatrix(result, rows1, cols1);
                } else {
                    cout << "Matrices cannot be subtracted. Dimensions do not match.\n";
                }
                break;

            case 3:
                if (cols1 == rows2) {
                    multiplyMatrices(mat1, mat2, result, rows1, cols1, cols2);
                    cout << "Product of the matrices:\n";
                    displayMatrix(result, rows1, cols2);
                } else {
                    cout << "Matrices cannot be multiplied. Invalid dimensions.\n";
                }
                break;

            case 4:
                cout << "Transpose of Matrix 1:\n";
                transposeMatrix(mat1, trans, rows1, cols1);
                displayMatrix(trans, cols1, rows1);

                cout << "Transpose of Matrix 2:\n";
                transposeMatrix(mat2, trans, rows2, cols2);
                displayMatrix(trans, cols2, rows2);
                break;

            case 5:
                cout << "Exiting...\n";
                break;

            default:
                cout << "Invalid choice. Please enter a number between 1 and 5.\n";
        }
    } while (choice != 5);

    return 0;
}
